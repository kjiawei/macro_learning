===============课程概览=================
1.进程和线程
      进程：基本概念，进程的创建，进程的退出，进程的回收
            exec函数族，system（） 
            进程间的通信方式：
                管道：有名管道，无名管道
                消息队列，共享内存，信号量
                信号
                unix域套接字（网络编程）
                套接字（网络编程）
      线程：基本概念，线程的创建，线程的退出，线程的回收
            线程的取消，设置优先级，线程的属性
            线程间同步互斥：
                互斥锁
                条件变量             
                信号量
            线程池



==============进程=============
1.进程：一个正在运行的程序就称作一个进程，进程是一个动态的概念
        进程在内存中
  可执行程序(ELF格式)：静态的概念
        保存在你电脑的磁盘中
  进程：在linux中用一个结构体struct task_struct
                            {



                            }   
引申：
          struct abc
           {
               基本数据；---》属性     成员变量
               函数指针；---》指向某种类型的函数   成员方法
           }；
        来表征某个进程在运行的过程中所有的状态信息（进程id，进程的父id，）
  孤儿进程：如果父进程没有主动去回收子进程，那么子进程会变成孤儿进程，孤儿进程最终会被系统中一个叫做INIT的进程回收，init进程号是1，它是所有进程的祖先（祖进程）
  引入了进程的概念之后：意味着可以实现多任务的并发处理（同时处理多个任务，以前的技术没有办法实现）


2.进程相关的API（接口函数）
     ps -ef 查看系统中当前正在运行的进程信息
   （1）进程的创建（创建子进程）
        fork()    
        vfork()  
        fork创建子进程的时候，子进程会复制它老爸的所有的资源
        vfork创建子进程的时候，子进程是共享它老爸的资源，一定是子进程先运行
     #include <unistd.h>
      pid_t fork(void);
        返回值：等于0   表示处于子进程中
                大于0   表示处于父进程中
                小于0   表示创建子进程失败
        此函数一次调用，两次返回
    （2）获取进程和父进程的ID号
     #include <unistd.h>
       pid_t getpid(void);  获取当前进程的ID
       pid_t getppid(void); 获取当前进程的父ID
    （3）进程的退出
         exit()  退出的时候会刷新IO缓冲区
         _exit() 退出的时候不刷新IO缓冲区
         跟return之间的区别
               return 返回到调用它的函数
               exit   退出整个进程
    （4）回收子进程
         wait()
         waitpid()
     
       pid_t wait(int *stat_loc);   阻塞父进程直到子进程退出然后回收子进程
            返回值：成功返回子进程的id
                    失败-1
              参数：stat_loc 保存子进程退出时的状态信息
                    不要将stat_loc理解成就是exit()圆括号里面的数字，那个数字只是退出值，无法反映子进程所有的状态信息，你只能使用我给的资料截图中linux定义好的宏函数去获取状态信息
       pid_t waitpid(pid_t pid, int *stat_loc, int options);
            它比wait要高级一点，因为它可以指定回收某个进程组里面的进程，也可以指定回收某个进程
            返回值：成功返回子进程的id
                    失败-1
              形参：pid   小于-1   比如-15  表示回收进程组id是15的那个进程组中的任意一个进程
                          -1       等待任意一个子进程
                          0        等待同进程组中任意一个子进程
                          >0       比如1245   指定回收id是1245的那个子进程
                    stat_loc
                    options        WNOHANG   
                                   
1.练习：
     创建4个子进程，每个子进程完成不同的事情，最后父进程要将4个孩子全部回收并获取每个孩子的状态信息（waitpid）
      
    
 
====================exec函数族和system()===========           
1.在一个程序中去调用另外一个可执行程序？？
2.解决方法
     （1）exec函数族
           execl()
           execp()
           char *arg[] = {"ls", "-a", NULL};
           execl( "/bin/ls", "ls","-a", NULL )   system("ls -a");
           execv( "/bin/ls",arg)
           execlp( "ls", "ls", "-a", NULL )
           execvp( "ls", arg )
           execle("/bin/ls", "ls", "-a", NULL, NULL)
           execve( "/bin/ls", arg, NULL )
    音乐播放system("madplay /music/1.mp3");
            system("killall -STOP madplay");


作业：.用命令行敲入命令：
farsight@ubuntu-desktop:~$ ls -l | grep “file”
运用所学知识，编程实现上述命令的效果。






      